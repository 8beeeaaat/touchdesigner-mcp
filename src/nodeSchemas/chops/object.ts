import { z } from "zod";
import { createCHOPSchema } from "./utils.js";

export const object = createCHOPSchema({
	dat: z.any().nullable().optional().describe("DAT"),
	target: z.any().nullable().optional().describe("Target"),
	reference: z.any().nullable().optional().describe("Reference"),
	swaptargetreference: z.boolean().optional().describe("Swap Target Reference"),
	compute: z.string().optional().describe("Compute"),
	translate: z.boolean().optional().describe("Translate"),
	rotate: z.boolean().optional().describe("Rotate"),
	scale: z.boolean().optional().describe("Scale"),
	quat: z.boolean().optional().describe("Quaternion"),
	bear: z.boolean().optional().describe("Bearing"),
	singlebear: z.boolean().optional().describe("Single Bearing"),
	distance: z.boolean().optional().describe("Distance"),
	invsqr: z.boolean().optional().describe("Inverse Square"),
	xord: z.string().optional().describe("Transform Order"),
	rord: z.string().optional().describe("Rotation Order"),
	includeorderchans: z.boolean().optional().describe("Include Order Channels"),
	bearingref: z.string().optional().describe("Bearing Reference"),
	bearingx: z.number().optional().describe("Bearing X"),
	bearingy: z.number().optional().describe("Bearing Y"),
	bearingz: z.number().optional().describe("Bearing Z"),
	tscopex: z.string().optional().describe("Transform Scope X"),
	tscopey: z.string().optional().describe("Transform Scope Y"),
	tscopez: z.string().optional().describe("Transform Scope Z"),
	appendattribs: z.boolean().optional().describe("Append Attributes"),
	smoothrotate: z.boolean().optional().describe("Smooth Rotate"),
	nameformat: z.string().optional().describe("Name Format"),
	outputrange: z.string().optional().describe("Output Range"),
	cookpast: z.boolean().optional().describe("Cook Past"),
	start: z.number().optional().describe("Start"),
	startunit: z.string().optional().describe("Start Unit"),
	end: z.number().optional().describe("End"),
	endunit: z.string().optional().describe("End Unit"),
	left: z.string().optional().describe("Left Boundary"),
	right: z.string().optional().describe("Right Boundary"),
	defval: z.number().optional().describe("Default Value"),
});
