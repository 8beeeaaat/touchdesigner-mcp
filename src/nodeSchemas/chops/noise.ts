import { z } from "zod";
import { createCHOPSchema } from "./utils.js";

export const noise = createCHOPSchema({
	type: z.string().optional().describe("Type"),
	seed: z.number().optional().describe("Seed"),
	period: z.number().optional().describe("Period"),
	periodunit: z.string().optional().describe("Period Unit"),
	harmon: z.number().optional().describe("Harmonics"),
	spread: z.number().optional().describe("Spread"),
	rough: z.number().optional().describe("Roughness"),
	exp: z.number().optional().describe("Exponent"),
	numint: z.number().optional().describe("Number of Intervals"),
	amp: z.number().optional().describe("Amplitude"),
	offset: z.number().optional().describe("Offset"),
	reset: z.boolean().optional().describe("Reset"),
	resetpulse: z.boolean().optional().describe("Reset Pulse"),
	xord: z.string().optional().describe("Transform Order"),
	rord: z.string().optional().describe("Rotation Order"),
	tx: z.number().optional().describe("Translate X"),
	ty: z.number().optional().describe("Translate Y"),
	tz: z.number().optional().describe("Translate Z"),
	rx: z.number().optional().describe("Rotate X"),
	ry: z.number().optional().describe("Rotate Y"),
	rz: z.number().optional().describe("Rotate Z"),
	sx: z.number().optional().describe("Scale X"),
	sy: z.number().optional().describe("Scale Y"),
	sz: z.number().optional().describe("Scale Z"),
	px: z.number().optional().describe("Pivot X"),
	py: z.number().optional().describe("Pivot Y"),
	pz: z.number().optional().describe("Pivot Z"),
	constraint: z.string().optional().describe("Constraint"),
	constrstart: z.number().optional().describe("Constraint Start"),
	constrend: z.number().optional().describe("Constraint End"),
	constrmean: z.number().optional().describe("Constraint Mean"),
	normal: z.boolean().optional().describe("Normal"),
	channelname: z.string().optional().describe("Channel Name"),
	start: z.number().optional().describe("Start"),
	startunit: z.string().optional().describe("Start Unit"),
	end: z.number().optional().describe("End"),
	endunit: z.string().optional().describe("End Unit"),
	rate: z.number().optional().describe("Rate"),
	left: z.string().optional().describe("Left Boundary"),
	right: z.string().optional().describe("Right Boundary"),
	defval: z.number().optional().describe("Default Value"),
});
