import { z } from "zod";
import { createSOPSchema } from "./utils.js";

const particle = createSOPSchema({
	sourcegrp: z.string().optional().describe("Source Group"),
	prtype: z.string().optional().describe("Particle Type"),
	behave: z.string().optional().describe("Behavior"),
	ptreuse: z.string().optional().describe("Point Reuse"),
	timepreroll: z.number().optional().describe("Time Preroll"),
	timeinc: z.number().optional().describe("Time Increment"),
	maxsteps: z.number().optional().describe("Maximum Steps"),
	jitter: z.boolean().optional().describe("Jitter"),
	accurate: z.boolean().optional().describe("Accurate"),
	rmunused: z.boolean().optional().describe("Remove Unused"),
	attractmode: z.string().optional().describe("Attract Mode"),
	reset: z.boolean().optional().describe("Reset"),
	resetpulse: z.boolean().optional().describe("Reset Pulse"),
	externalx: z.number().optional().describe("External Force X"),
	externaly: z.number().optional().describe("External Force Y"),
	externalz: z.number().optional().describe("External Force Z"),
	windx: z.number().optional().describe("Wind X"),
	windy: z.number().optional().describe("Wind Y"),
	windz: z.number().optional().describe("Wind Z"),
	turbx: z.number().optional().describe("Turbulence X"),
	turby: z.number().optional().describe("Turbulence Y"),
	turbz: z.number().optional().describe("Turbulence Z"),
	period: z.number().optional().describe("Period"),
	seed: z.number().optional().describe("Seed"),
	doid: z.boolean().optional().describe("Do ID"),
	domass: z.boolean().optional().describe("Do Mass"),
	mass: z.number().optional().describe("Mass"),
	dodrag: z.boolean().optional().describe("Do Drag"),
	drag: z.number().optional().describe("Drag"),
	birth: z.number().optional().describe("Birth"),
	life: z.number().optional().describe("Life"),
	lifevar: z.number().optional().describe("Life Variance"),
	alpha: z.number().optional().describe("Alpha"),
	surfattract: z.number().optional().describe("Surface Attraction"),
	birthcount: z.number().optional().describe("Birth Count"),
	birthpulse: z.boolean().optional().describe("Birth Pulse"),
	limitposx: z.number().optional().describe("Limit Positive X"),
	limitposy: z.number().optional().describe("Limit Positive Y"),
	limitposz: z.number().optional().describe("Limit Positive Z"),
	limitnegx: z.number().optional().describe("Limit Negative X"),
	limitnegy: z.number().optional().describe("Limit Negative Y"),
	limitnegz: z.number().optional().describe("Limit Negative Z"),
	hit: z.string().optional().describe("Hit"),
	gaintan: z.number().optional().describe("Gain Tangent"),
	gainnorm: z.number().optional().describe("Gain Normal"),
	splittype: z.string().optional().describe("Split Type"),
	splitmin: z.number().optional().describe("Split Minimum"),
	splitmax: z.number().optional().describe("Split Maximum"),
	splitvelx: z.number().optional().describe("Split Velocity X"),
	splitvely: z.number().optional().describe("Split Velocity Y"),
	splitvelz: z.number().optional().describe("Split Velocity Z"),
	splitvarx: z.number().optional().describe("Split Variance X"),
	splitvary: z.number().optional().describe("Split Variance Y"),
	splitvarz: z.number().optional().describe("Split Variance Z"),
});

export { particle };
